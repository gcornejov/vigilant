name: Build and Deploy Service

on:
  push:
    branches: main
    paths:
      - terraform/**
      - vigilant/**
      - .dockerignore
      - Dockerfile
      - poetry.lock
      - .github/workflows/build-deploy.yml
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      deploy:
        description: Deploy service
        required: false
        type: boolean
        default: false
      no-cache:
        description: Disable build cache
        required: false
        type: boolean

jobs:
  docker:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ vars.DOCKERHUB_USERNAME }}/vigilant@${{ steps.build-push.outputs.digest }}
    steps:
      -
        name: Image tag
        id: image-tag
        run: |
          tag=latest

          case ${{ github.event_name }} in
            'workflow_dispatch')
              tag=$( echo ${{ github.ref_name }} | head -c 15 )-$( echo ${{ github.sha }} | head -c 7 )
              ;;
            'release')
              tag=${{ github.ref_name }}
              ;;
          esac

          echo "tag=${tag}" >> "$GITHUB_OUTPUT"
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build and push
        id: build-push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/vigilant:${{ steps.image-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          no-cache: ${{ github.event.inputs.no-cache || false }}

  terraform:
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.deploy == 'true'
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4
      -
        name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ vars.TF_VERSION }}
          terraform_wrapper: false
      -
        name: GCP Auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.TF_SA }}
      -
        name: Terraform Init
        working-directory: terraform
        run: terraform init
      -
        name: Terraform Apply
        working-directory: terraform
        run: terraform apply --auto-approve -var service_image=${{ needs.docker.outputs.image }}
